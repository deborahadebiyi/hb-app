// If you want to store the author’s username in each comment:

// Add a username field in the comments schema.
// Populate the username when creating the comment.
// Updated Comment Schema:
// typescript
// Copy code
// const CommentSchema = new Schema<IComment>(
//   {
//     content: { type: String, required: true },
//     authorId: { type: String, required: true },
//     authorRole: { type: String, enum: ["vendor", "customer"], required: true },
//     targetId: { type: String, required: true },
//     targetRole: { type: String, enum: ["vendor", "customer"], required: true },
//     username: { type: String, required: true }, // Author's username
//   },
//   { timestamps: true }
// );
// Creating a Comment with username:
// When creating a comment, retrieve the username from the User collection (VendorModel or CustomerModel) and include it in the comment.

// Example:

// typescript
// Copy code
// // Fetch username
// const user = await BaseUserModel.findOne({ accountId: "vendor123" });
// if (!user) throw new Error("User not found");

// // Create a comment
// const newComment = new CommentModel({
//   content: "Great service!",
//   authorId: user.accountId,
//   authorRole: user.role, // e.g., "vendor"
//   targetId: "customer456",
//   targetRole: "customer",
//   username: user.name, // Use the author's name/username
// });

// await newComment.save();
// This way, each comment directly stores the username, avoiding additional lookups during retrieval.

// 4. Querying Comments with the Author’s Username
// You can now query and display comments along with the author's username directly from the comments collection:

// typescript
// Copy code
// const vendorComments = await CommentModel.find({ 
//   targetId: "vendor123", 
//   targetRole: "vendor" 
// });

// vendorComments.forEach((comment) => {
//   console.log(`Author: ${comment.username}, Content: ${comment.content}`);
// });



//  Alternative Approach: Using populate
// If you prefer not to store username directly in the comments collection, you can use Mongoose's populate to fetch it dynamically from the users collection.

// Example with populate:
// typescript
// Copy code
// const vendorComments = await CommentModel.find({
//   targetId: "vendor123",
//   targetRole: "vendor",
// }).populate({
//   path: "authorId", // Reference to User collection
//   select: "name",   // Only fetch the name field
// });
// This requires that the authorId references the _id of the User model, which might not align with your current setup if you're using a custom accountId.

Indexing for Performance
To optimize queries:

Compound Indexes:

Index authorId and authorRole together for queries about the commenter.
Index targetId and targetRole together for queries about the target.
Example:

typescript
Copy code
CommentSchema.index({ authorId: 1, authorRole: 1 });
CommentSchema.index({ targetId: 1, targetRole: 1 });
Full-Text Indexing (Optional):

If you want to enable search functionality on content (e.g., searching comments by keywords), add a full-text index:
typescript
Copy code
CommentSchema.index({ content: "text" });


. Retrieve All Comments for a Specific Vendor
If you want all comments where the targetId matches a specific vendor's accountId:

typescript
Copy code
async function getCommentsForVendor(vendorAccountId: string) {
  const comments = await CommentModel.find({ targetId: vendorAccountId })
    .populate({
      path: "authorId",
      model: "User",
      select: "username role accountId", // Fetch specific fields
    })
    .exec();

  comments.forEach((comment) => {
    console.log(
      `Comment from ${comment.authorId?.username} (ID: ${comment.authorId?.accountId}): ${comment.content}`
    );
  });

  return comments;
}


Retrieve Comments Authored by a Specific User
To find all comments authored by a particular user:

typescript
Copy code
async function getCommentsByAuthor(authorAccountId: string) {
  const comments = await CommentModel.find({ authorId: authorAccountId })
    .populate({
      path: "targetId",
      model: "User",
      select: "username role accountId", // Target details
    })
    .exec();

  comments.forEach((comment) => {
    console.log(
      `Comment to ${comment.targetId?.username} (ID: ${comment.targetId?.accountId}): ${comment.content}`
    );
  });

  return comments;
}

// CAN REWARD THEM
Find the Most Active Authors
To find users who have authored the most comments:

typescript
Copy code
async function findMostActiveAuthors() {
  const authors = await CommentModel.aggregate([
    { $group: { _id: "$authorId", commentCount: { $sum: 1 } } },
    { $lookup: { from: "users", localField: "_id", foreignField: "accountId", as: "author" } },
    { $unwind: "$author" },
    { $sort: { commentCount: -1 } }, // Sort by number of comments
    { $limit: 10 }, // Get top 10 authors
    { $project: { _id: 0, authorId: "$_id", commentCount: 1, username: "$author.username" } },
  ]);

  authors.forEach((author) => {
    console.log(`${author.username} has authored ${author.commentCount} comments`);
  });

  return authors;
}

Paginate Comments for a Specific User
To paginate comments (e.g., 10 comments per page) for a specific targetId:

typescript
Copy code
async function getPaginatedCommentsForUser(targetId: string, page: number, limit: number) {
  const skip = (page - 1) * limit;

  const comments = await CommentModel.find({ targetId })
    .populate({
      path: "authorId",
      model: "User",
      select: "username accountId",
    })
    .sort({ createdAt: -1 }) // Most recent first
    .skip(skip)
    .limit(limit)
    .exec();

  return comments;
}

// Example Usage
const page = 1;
const limit = 10;
const comments = await getPaginatedCommentsForUser("vendor123", page, limit);
comments.forEach((comment) => console.log(comment.content));
9. Get All Comments Within a Date Range
To retrieve comments created within a specific date range:

typescript
Copy code
async function getCommentsWithinDateRange(startDate: Date, endDate: Date) {
  const comments = await CommentModel.find({
    createdAt: { $gte: startDate, $lte: endDate },
  })
    .populate("authorId", "username accountId")
    .populate("targetId", "username accountId")
    .exec();

  comments.forEach((comment) => {
    console.log(
      `Comment by ${comment.authorId?.username} on ${comment.targetId?.username}: ${comment.content}`
    );
  });

  return comments;
}

// Example Usage
const start = new Date("2024-01-01");
const end = new Date("2024-12-31");
await getCommentsWithinDateRange(start, end);

Best Practices for Queries
Indexes:
Add compound indexes for frequent queries (e.g., { targetId: 1, createdAt: -1 } for pagination).
Ensure accountId is indexed for fast lookups.
Projections:
Use .select() or project to retrieve only necessary fields, reducing query overhead.
Aggregation:
Use MongoDB's aggregation framework for complex queries involving grouping or joins.
