
Using Mongoose discriminators is a great way to manage polymorphic schemas, such as having a base User schema and extending it into Vendor and Customer models. Hereâ€™s a step-by-step guide and examples:

Discriminator Overview
Base Schema (User): Contains fields common to all users, like accountId, username, email, etc.
Customer Schema: Extends User with fields like loyaltyPoints or preferences.
Vendor Schema: Extends User with fields like businessName or products.
Discriminators allow Mongoose to handle these relationships while keeping all documents in the same collection.

Defining the Models with Discriminators
1. Base Schema (User)
typescript
Copy code
import mongoose, { Schema, Document, Model } from "mongoose";

export interface IUser extends Document {
  accountId: string;
  username: string;
  email: string;
  role: "customer" | "vendor"; // Role differentiation
  createdAt: Date;
}

const UserSchema = new Schema<IUser>(
  {
    accountId: { type: String, required: true, unique: true },
    username: { type: String, required: true },
    email: { type: String, required: true },
    role: { type: String, required: true, enum: ["customer", "vendor"] },
    createdAt: { type: Date, default: Date.now },
  },
  { discriminatorKey: "role" } // Enables discriminators
);

const UserModel: Model<IUser> = mongoose.model<IUser>("User", UserSchema);
export default UserModel;
2. Customer Schema
typescript
Copy code
export interface ICustomer extends IUser {
  loyaltyPoints: number;
  preferences?: string[];
}

const CustomerSchema = new Schema<ICustomer>({
  loyaltyPoints: { type: Number, default: 0 },
  preferences: { type: [String], default: [] },
});

const CustomerModel = UserModel.discriminator<ICustomer>(
  "Customer",
  CustomerSchema
);
export { CustomerModel };
3. Vendor Schema
typescript
Copy code
export interface IVendor extends IUser {
  businessName: string;
  products: string[];
}

const VendorSchema = new Schema<IVendor>({
  businessName: { type: String, required: true },
  products: { type: [String], default: [] },
});

const VendorModel = UserModel.discriminator<IVendor>("Vendor", VendorSchema);
export { VendorModel };
Querying Using Discriminators
With discriminators, you can query specific types (Customer or Vendor) easily.

1. Querying for a Customer by Account ID
You can use the CustomerModel directly to filter only customers:

typescript
Copy code
import { CustomerModel } from "./models/customer";

async function getCustomerByAccountId(accountId: string) {
  const customer = await CustomerModel.findOne({ accountId });

  if (!customer) {
    throw new Error(`Customer with accountId ${accountId} not found`);
  }

  console.log(
    `Customer: ${customer.username}, Loyalty Points: ${customer.loyaltyPoints}`
  );
  return customer;
}
2. Querying for a Vendor by Account ID
Similarly, use the VendorModel:

typescript
Copy code
import { VendorModel } from "./models/vendor";

async function getVendorByAccountId(accountId: string) {
  const vendor = await VendorModel.findOne({ accountId });

  if (!vendor) {
    throw new Error(`Vendor with accountId ${accountId} not found`);
  }

  console.log(
    `Vendor: ${vendor.username}, Business Name: ${vendor.businessName}`
  );
  return vendor;
}
3. Fetching All Users of a Specific Role
Use the base UserModel with a filter on role:

typescript
Copy code
import UserModel from "./models/user";

async function getAllVendors() {
  const vendors = await UserModel.find({ role: "vendor" });

  vendors.forEach((vendor) => {
    console.log(`Vendor: ${vendor.username}`);
  });

  return vendors;
}
4. Populating a Field Referencing a Discriminator
Assume the authorId in the Comment schema references accountId in the User collection.

typescript
Copy code
import CommentModel from "./models/comment";
import UserModel from "./models/user";

async function getCommentsWithAuthors() {
  const comments = await CommentModel.find()
    .populate({
      path: "authorId",
      model: UserModel, // Populate from the User base model
      select: "username role", // Select specific fields
    })
    .exec();

  comments.forEach((comment) => {
    console.log(
      `Comment: ${comment.text}, Author: ${comment.authorId.username}, Role: ${comment.authorId.role}`
    );
  });

  return comments;
}
Benefits of Using Discriminators
Single Collection:
Simplifies querying and indexing.
Makes updates and maintenance easier since all users share the same collection.
Role-Specific Extensions:
Different schemas for different user types, while keeping shared fields consistent.
Efficiency:
Querying is more efficient when targeting a specific type (e.g., CustomerModel.find()).
Considerations
Indexes: Create indexes on fields like accountId and role for efficient lookups:

typescript
Copy code
UserSchema.index({ accountId: 1, role: 1 });
Discriminator Inheritance: Use the discriminator models (CustomerModel or VendorModel) for queries specific to their roles.

